import numpy as np
import matplotlib.pyplot as plt

a0 = -0.85428821
a1 = -0.89108762
a2 = -0.12560849
a3 = -0.05895968
a4 = -0.13015584
a5 = 1.73493332

def f(x, y):
    return a0 + a1*x + a2*y + a3*x*2 + a4*x*y + a5*y*2

# Derivadas parciales
def grad_f(x, y):
    df_dx = a1 + 2*a3*x + a4*y
    df_dy = a2 + a4*x + 2*a5*y
    return np.array([df_dx, df_dy])

# Crear cuadrícula
x = np.linspace(-2, 2, 20)
y = np.linspace(-2, 2, 20)
X, Y = np.meshgrid(x, y)
Z = f(X, Y)

# Calcular gradiente
U = np.zeros_like(X)
V = np.zeros_like(Y)

for i in range(X.shape[0]):
    for j in range(X.shape[1]):
        grad = grad_f(X[i, j], Y[i, j])
        U[i, j] = grad[0]
        V[i, j] = grad[1]

# Graficar
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, alpha=0.5, rstride=100, cstride=100, color='r')

data_x = np.random.uniform(-2, 2, 100)
data_y = np.random.uniform(-2, 2, 100)
data_z = f(data_x, data_y)
ax.scatter(data_x, data_y, data_z, color='b')

# gradiente 2D
plt.figure()
plt.contour(X, Y, Z, levels=20)
plt.quiver(X, Y, U, V, color='r')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Vector Gradiente')

# Mostrar gráficos
plt.show()
